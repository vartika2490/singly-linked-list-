# -*- coding: utf-8 -*-
"""github.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rayP1RuQYn-AQP60mEVoaTv3mMNQESMy
"""

# Node class to store data and the next pointer
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# LinkedList class to manage the list
class LinkedList:
    def __init__(self):
        self.head = None

    # Add a new node at the end
    def add_node(self, data):
        new_node = Node(data)
        if not self.head:  # If list is empty
            self.head = new_node
        else:
            temp = self.head
            while temp.next:  # Go to the last node
                temp = temp.next
            temp.next = new_node

    # Print all nodes
    def print_list(self):
        if not self.head:
            print("List is empty.")
            return
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

    # Delete the nth node (1-based index)
    def delete_nth_node(self, n):
        if not self.head:
            print("Can't delete from an empty list.")
            return

        if n <= 0:
            print("Invalid position. Please enter a positive number.")
            return

        # If first node is to be deleted
        if n == 1:
            print(f"Deleting node at position {n} with value {self.head.data}")
            self.head = self.head.next
            return

        temp = self.head
        count = 1

        # Move to (n-1)th node
        while temp and count < n - 1:
            temp = temp.next
            count += 1

        # If next node is None, index is out of range
        if not temp or not temp.next:
            print("Position out of range.")
            return

        print(f"Deleting node at position {n} with value {temp.next.data}")
        temp.next = temp.next.next

# Test it out
if __name__ == "__main__":
    my_list = LinkedList()

    # Adding items to the list
    my_list.add_node(10)
    my_list.add_node(20)
    my_list.add_node(30)
    my_list.add_node(40)

    print("Current List:")
    my_list.print_list()

    # Deleting a node
    my_list.delete_nth_node(3)

    print("List after deleting 3rd node:")
    my_list.print_list()

    # Trying to delete an invalid position
    my_list.delete_nth_node(10)

    # Trying to delete from an empty list
    empty_list = LinkedList()
    empty_list.delete_nth_node(1)